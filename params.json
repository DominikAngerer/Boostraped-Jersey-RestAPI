{"name":"java-gsonjerseyprovider","tagline":"GsonJerseyProvider is an example on how to use the Google Gson Library as an Provider on Jersey JAX-RS applications.","body":"GsonJerseyProvider is an example on how to use the Google Gson Library as an Provider on Jersey JAX-RS applications.\r\n\r\nThe original Version of the GsonJerseyProvidor.java can be found here: [@eclipsesource]:\r\n\r\n> Creating modern applications often involves consuming REST\r\n> based web services. One of the more popular ways to publish \r\n> a REST service in Java is the JAX-RS (Jersey) specification.\r\n> It allows you to very easily enhance your REST resources \r\n> with Java annotations.\r\n\r\nby [Moritz Post]. \r\n\r\nI needed an working example, because I had some issues getting started only with his class and I couldn't just leave it dead on my disk.\r\n\r\n#### The configuration part\r\nFirst to get the class of [Moritz Post] running we need to do a little bit of configuration so Jersey knows to load the provider (`web.xml`):\r\n```xml\r\n<servlet>\r\n\t<servlet-name>Services</servlet-name>\r\n\t<servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>\r\n\t<init-param>\r\n\t\t<param-name>jersey.config.server.provider.packages</param-name>\r\n\t\t<param-value>\r\n  \t\t\tcom.dominikangerer.gson.provider.v1.util,\r\n  \t\t\tcom.dominikangerer.gson.provider.v1.controller\r\n  \t\t</param-value>\r\n\t</init-param>\r\n\t<init-param>\r\n\t\t<param-name>jersey.config.server.provider.scanning.recursive</param-name>\r\n\t\t<param-value>false</param-value>\r\n\t</init-param>\r\n\t<load-on-startup>1</load-on-startup>\r\n</servlet>\r\n```\r\nNow you should be able to run the example from [Moritz Post] but you will have to add the `GsonUtil` to get the version I provided in this repository as well - so let me explain it a little bit to you.\r\n\r\n### GsonUtil\r\n\r\nIn this GsonUtil I added the DateFormat `yyyy-MM-dd'T'HH:mm:ss.SSSXX` as default DateFormat to Gson by adding new `registerTypeAdapter` for serializing and deserializing. I also added the possibility to load a preconfigurated instance of Gson to show only properties with `@Expose` Annotation.\r\n\r\n### Container\r\nWhy? Javascipt Frameworks like Ember can be used with an RESTAdapter which provide such an pattern of responses - so why not return such an formated Json?\r\n\r\nIn this Repository you can find an simple Controller for `GET`ting an `List<Resource>` and simply `GET` an `Resource` by id. To Achieve this on an structured way I added an new `container` package which can be used for `resources` and also for an single `resource`. It also capsules the whole `Response.status(Response.Status.X).entity(Y).build();` stuff for you so you can simply use it like this in your Controller to return the action you performed with the right success status:\r\n\r\n```java\r\nreturn ResourceContainer.ok();\r\nreturn ResourceContainer.ok(Resource);\r\nreturn ResourceContainer.ok(Resource List);\r\nreturn ResourceContainer.ok(Resource ArrayList);\r\nreturn ResourceContainer.ok(Resource Collection);\r\nreturn ResourceContainer.updated();\r\nreturn ResourceContainer.updated(Resource);\r\nreturn ResourceContainer.created(Resource);\r\nreturn ResourceContainer.deleted();\r\n```\r\n\r\n### Version\r\n1.0.1\r\n\r\n### Installation\r\n\r\nYou need an Container like Tomcat and clone this repository:\r\n\r\n```git\r\ngit clone git@github.com:DominikAngerer/java-GsonJerseyProvider.git\r\n```\r\n\r\nImport it into your favourite IDE (i'm using Eclipse Luna) and enjoy.\r\n\r\n### Calls\r\n\r\n~~Don't mind if you get an 404 on path: `/`.~~\r\nNow it will return: `Okay, I hated the 404 Page here ;)`, because I really did.\r\n\r\n- Get List of Resources\r\n`http://localhost:8080/gson.provider/v1/resources`\r\n\r\n- get Resource by Id\r\n`http://localhost:8080/gson.provider/v1/resources/b1e581bf-8265-480c-a460-50c860df15be`\r\n\r\n### Links\r\n\r\n- Blog Entry [@Lanora]: http://lanora.io/2014/11/gson-jersey-provider/\r\n- Stackoverflow #1: http://stackoverflow.com/a/9516224/1581725\r\n- Stackoverflow #2: http://stackoverflow.com/a/29551143/1581725\r\n- Eclipsesource by [Moritz Post]: http://eclipsesource.com/blogs/2012/11/02/integrating-gson-into-a-jax-rs-based-application/\r\n\r\n[@eclipsesource]:http://eclipsesource.com/blogs/2012/11/02/integrating-gson-into-a-jax-rs-based-application/\r\n[Moritz Post]:http://profiles.google.com/110380137820502036004\r\n[@Lanora]:http://lanora.io/2014/11/gson-jersey-provider/\r\n[Mike Penz]:https://github.com/mikepenz\r\n[Thomas Pink]:https://github.com/thomaspink\r\n[Stackoverflow#1]:http://stackoverflow.com/a/9516224/1581725\r\n[Stackoverflow#2]:http://stackoverflow.com/a/29551143/1581725\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}